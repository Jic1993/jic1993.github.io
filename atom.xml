<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小路</title>
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tinyland.site/"/>
  <updated>2017-06-19T08:20:57.201Z</updated>
  <id>http://tinyland.site/</id>
  
  <author>
    <name>小路</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Win10+VS2017编译opencv3.2.0和opencv_contrib3.2.0来调用text模块</title>
    <link href="http://tinyland.site/posts/2017-06-19-Win10-VS2017-compile-opencv3-2-0-and-opencv-contrib3-2-0-to-call-the-text-module.html"/>
    <id>http://tinyland.site/posts/2017-06-19-Win10-VS2017-compile-opencv3-2-0-and-opencv-contrib3-2-0-to-call-the-text-module.html</id>
    <published>2017-06-18T16:23:16.000Z</published>
    <updated>2017-06-19T08:20:57.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近做一些字符识别的事情，想试一下opencv_contrib里的<a href="https://github.com/opencv/opencv_contrib/tree/master/modules/text" target="_blank" rel="external">Text</a>(自然场景图像中的文本检测与识别)模块。</p>
<p>我参照了网上的一些教程去编译opencv+opencv_contrib，但是最后去跑样例程序(比如<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/text/samples/end_to_end_recognition.cpp" target="_blank" rel="external">end_to_end_recognition.cpp</a> ),在运行生成的<strong>exe</strong>文件时会提示<code>OCRTesseract(33): Tesseract not found.</code>类似的错误。</p>
<p>其原因<strong><sup><a href="https://stackoverflow.com/questions/33655610/opencv-tesseract/35012185#35012185" target="_blank" rel="external"> [1] </a></sup></strong>是Text模块中的字符识别部分使用的是<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="external">Tesseract OCR</a>，因此在使用CMake编译生成OpenCV项目文件时，应该确保它能找到Tesseract.<br>也就是需要先编译好Tesseract，接着告诉CMake你的Tesseract在哪(包括它的头文件<strong>.h</strong>以及<strong>lib</strong>文件)，然后再编译OpenCV.</p>
<p>最终样例的<strong>端到端字符识别效果图</strong>如下：<br><img src="http://upload-images.jianshu.io/upload_images/4066522-179cef6eae5a7888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="End to End Scene Text识别结果"></p>
<a id="more"></a>
<p>以下是我的<strong>具体步骤</strong>(下面的方法是我自己试过可行的，不保证方法一定很简洁，应该说确实有些繁琐，因为我对编译源码经验也一般，我想肯定有更加简洁的方法可以办到)：</p>
<hr>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><ul>
<li>Windows 10 / 64-bit</li>
<li>VS2017 Community <a href="https://www.visualstudio.com/zh-hans/vs/" target="_blank" rel="external">https://www.visualstudio.com/zh-hans/vs/</a></li>
<li>CMake最新版 <a href="https://cmake.org/download/" target="_blank" rel="external">https://cmake.org/download/</a> (我选的是cmake-3.8.2-win64-x64.msi)</li>
<li>CPPAN最新版 <a href="https://cppan.org/client/" target="_blank" rel="external">https://cppan.org/client/</a> (cppan-master-Windows-client.zip)</li>
<li>Tesseract <strong>3.05.01</strong> <a href="https://github.com/tesseract-ocr/tesseract/releases/tag/3.05.01" target="_blank" rel="external">https://github.com/tesseract-ocr/tesseract/releases/tag/3.05.01</a></li>
<li>OpenCV <strong>3.2.0</strong> <a href="https://github.com/opencv/opencv/releases/tag/3.2.0)" target="_blank" rel="external">https://github.com/opencv/opencv/releases/tag/3.2.0)</a></li>
<li>OpenCV_contrib <strong>3.2.0</strong> <a href="https://github.com/opencv/opencv_contrib/releases/tag/3.2.0" target="_blank" rel="external">https://github.com/opencv/opencv_contrib/releases/tag/3.2.0</a>(和opencv的版本对应)</li>
</ul>
<p>注意在安装VS2017的时候需要勾选<strong>使用C++的桌面开发</strong>这个选项，否则后面用CMake编译的时候可能会提示找不到C++编译器。(估计应该就是需要右边小红框里的那个东西，但是保险起见我还是全装了=-=)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-1f05c7505943e1a6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="install_vs"></p>
<h1 id="编译Tesseract"><a href="#编译Tesseract" class="headerlink" title="编译Tesseract"></a>编译Tesseract</h1><p>下载完源代码之后，我习惯先创建3个文件夹 <code>sources, build 和 install</code>  分别用来存放解压出来的源代码、以及之后会编译输出的工程文件和安装文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-8d85d7e144b4c1c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3-folders"></p>
<h2 id="使用CPPAN下载依赖包"><a href="#使用CPPAN下载依赖包" class="headerlink" title="使用CPPAN下载依赖包"></a>使用CPPAN下载依赖包</h2><p>在用CMake(cmake-gui)编译tesseract源代码之前，需要先用<strong>CPPAN</strong>下载依赖项，首先打开命令行提示工具(cmd)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d:</div><div class="line">cd path_to_tesseract  //比如我的是 D:\Tesseract\sources</div><div class="line">cppan                 //下载依赖的软件包，如leptonica等</div></pre></td></tr></table></figure></p>
<p><strong>CPPAN</strong>感觉就是一个C++的包管理器，类似于Java的Maven、JavaScript的npm.  我也是第一次接触，看了tesseract的官方<a href="https://github.com/tesseract-ocr/tesseract/wiki/Compiling#windows" target="_blank" rel="external">编译文档</a>才知道有这么个神奇的东西。<br>当在<code>tesseract</code>根目录下运行<code>cppan</code>时，它会读取<code>cppan.yml</code>文件中所规定的项目的依赖项（如下图所示），帮你下载好需要的依赖包和初始化编译器配置。具体可以参考<a href="https://github.com/cppan/cppan/blob/master/doc/getting_started.md" target="_blank" rel="external">CPPAN官方文档</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-a767c96ccc3c9999.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dependencies"></p>
<h2 id="使用cmake-gui进行编译"><a href="#使用cmake-gui进行编译" class="headerlink" title="使用cmake-gui进行编译"></a>使用cmake-gui进行编译</h2><p>打开cmake-gui进行编译：</p>
<ol>
<li>在<strong>where is the source code</strong>中选择tesseract的源码路径，比如我的是<code>D:/Tesseract/sources</code></li>
<li>在<strong>where to build the binaries</strong>里面选择你要编译到的路径，例如<code>D:/Tesseract/build</code></li>
<li>点击<strong>Configure</strong>，这时会弹出一个对话框，让你设置生成器，选择<strong>Visual Studio 15 2017 Win64</strong>，点击<strong>Finish</strong>，这个时候CMake会开始在<code>build</code>目录下生成一些配置文件，如 CMakeCache.txt 等。</li>
<li>完成之后会在屏幕中间出现一堆Name和Value的参数，找到<strong>CMAKE_INSTALL_PREFIX</strong> 将其设置成你想要的安装路径，例如 <code>D:/Tesseract/install</code></li>
<li>再次点击<strong>Configure</strong>，然后点击<strong>Generate</strong>，这时你可以看到在<code>build</code>目录下已经生成了名为<strong>tesseract.sln</strong>的VS工程（就是这么神奇^-^）。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-2d8d673a86e0d301.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置cmake"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-84e044f5bf142388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择生成器"></p>
<h2 id="用VS编译生成debug和release库："><a href="#用VS编译生成debug和release库：" class="headerlink" title="用VS编译生成debug和release库："></a>用VS编译生成debug和release库：</h2><ol>
<li>打开<code>build</code>目录下的<strong>tesseract.sln</strong>的VS工程（直接在cmake-gui中点<strong>Open Project</strong>是一样的）</li>
<li>编译生成<strong>Debug</strong>版本库：首先选择<strong>Debug</strong>生成模式, 找到<strong>CMakeTargets</strong>中的<strong>ALL_BUILD</strong>,点击<strong>右键–&gt;生成解决方案</strong>。这一步会需要一些时间，之后你会在<code>build/bin/Debug</code>目录下看到新生成了很多文件，其实这时候tesseract已经可以用了（前提是在此目录下面下载好训练数据文件）。</li>
<li>生成安装文件：找到<strong>CMakeTargets</strong>中的<strong>INSTALL</strong>，然后右键选择<strong>仅限于项目–&gt;仅生成INSTALL</strong>，然后在<code>D:\Tesseract\install</code>中就会看到生成好生成头文件和可执行文件等。</li>
<li><strong>Release</strong>版本的方法相同，选择<strong>Release</strong>模式，重复2、3即可。</li>
<li><strong>编译错误解决</strong>： 在编译生成过程中可能会遇到因为文件编码问题而产生的错误，一个出错的地方是<strong>pango-language-sample-table.h</strong> ，需要改成<strong>UTF-8</strong> 编码；另一个是<strong>equationdetect.cpp</strong>，需要改成<strong>ANSI/OEM-简体中文 GBK</strong>编码。</li>
</ol>
<p>有同学可能想说，那我<strong>直接点击仅生成INSTALL行不行？</strong> 你可以自己尝试一下，答案是不行的😂</p>
<blockquote>
<p>其实感觉这一套流程，和在<em>Linux</em>系统上用命令打<code>./configure, make, make install...</code>之类的应该是对应的，只是在<em>Windows</em>上改成了用CMake、VS等图形化界面地去完成了这些事情。</p>
</blockquote>
<p>有些尬尴的是，这个时候tesseract还不能用，主要是要解决两个问题：</p>
<ol>
<li><p>如果你在命令行中<code>install/bin</code>目录下输入<code>tesseract  phototest.tif stdout</code> （phototest是一张待识别的字符图片，stdout表示将识别结果输出到标准输出即在命令行中直接显示）， 会提示丢失<code>pvt.cppan.demo.danbloomberg.leptonica-1.74.4.dll</code>等一系列dll的错误。<br>这里我的解决办法比较笨（感觉应该可以通过一些配置，让VS自己拷贝过去），就是直接把<code>build/bin</code>下的dll全部拷贝过去，放到<code>install/bin</code>路径下。<br><img src="http://upload-images.jianshu.io/upload_images/4066522-87d2607cb2685d72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tesseract_error"><br><img src="http://upload-images.jianshu.io/upload_images/4066522-1be6a43e2e64e0d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phototest"><br><img src="http://upload-images.jianshu.io/upload_images/4066522-327521d77e7c96c6.gif?imageMogr2/auto-orient/strip" alt="copy_dlls.gif"></p>
</li>
<li><p>再次执行<code>tesseract  phototest.tif stdout</code>，会提示如下所示的另一个问题，找不到训练数据文件<code>\Tesseract\install\bin\tessdata/eng.traineddata</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">D:\Tesseract\install\bin&gt;tesseract phototest.tif stdout</div><div class="line">Error opening data file \Tesseract\install\bin\tessdata/eng.traineddata</div><div class="line">Please make sure the TESSDATA_PREFIX environment variable is set to the parent directory of your &quot;tessdata&quot; directory.</div><div class="line">Failed loading language &apos;eng&apos;</div><div class="line">Tesseract couldn&apos;t load any languages!</div><div class="line">Could not initialize tesseract.</div></pre></td></tr></table></figure>
<p>解决办法就是到tesseract官网的<a href="https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-304305" target="_blank" rel="external">数据下载页面</a>下载Tesseract 3.05 对应的训练数据  <a href="https://github.com/tesseract-ocr/tessdata/raw/3.04.00/eng.traineddata" target="_blank" rel="external">eng.traineddata</a>， 然后在<code>install/bin</code>目录下新建<code>tessdata</code>文件夹，并放入下载好的数据文件<code>eng.traineddata</code>，这样tesseract就可以用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">D:\Tesseract\install\bin&gt;tesseract phototest.tif stdout</div><div class="line">Page 1</div><div class="line">This is a lot of 12 point text to test the</div><div class="line">cor code and see if it works on all types</div><div class="line">of file format.</div><div class="line">The quick brown dog jumped over the</div><div class="line">lazy fox. The quick brown dog jumped</div><div class="line">over the lazy fox. The quick brown dog</div><div class="line">jumped over the lazy fox. The quick</div><div class="line">brown dog jumped over the lazy fox.</div></pre></td></tr></table></figure>
</li>
</ol>
<p>(注：这里可以先将tesseract的<code>bin</code>路径(如:<code>D:\Tesseract\install\bin</code>)加入到环境变量<strong>PATH</strong>中，因为后面跑样例程序的时候会用到，否则会报错。)</p>
<h1 id="编译opencv-opencv-contrib"><a href="#编译opencv-opencv-contrib" class="headerlink" title="编译opencv+opencv_contrib"></a>编译opencv+opencv_contrib</h1><p>编译方法和上面tesseract的步骤非常类似，同样是先用cmake-gui编译，然后用VS生成库文件（先ALL_BUILD，再INSTALL），基本就是照着上面的流程再来一遍。</p>
<p>只是在cmake编译时的一些配置项不同，<strong>尤其重要的是你要告诉CMake你的opencv_contrib和tesseract在哪</strong>，具体见下表。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Value(根据你自己的路径修改)</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>OPENCV_EXTRA_MODULES_PATH</td>
<td>D:/OpenCV/sources/modules/contrib/modules</td>
<td>opencv_contrib的路径</td>
</tr>
<tr>
<td>CMAKE_INSTALL_PREFIX</td>
<td>D:/OpenCV/install</td>
<td>目标安装路径</td>
</tr>
<tr>
<td>Tesseract_INCLUDE_DIR</td>
<td>D:/Tesseract/install/include</td>
<td>tesseract头文件路径</td>
</tr>
<tr>
<td>Tesseract_LIBRARY</td>
<td>D:/Tesseract/install/lib/tesseract305.lib</td>
<td>tesseract lib路径</td>
</tr>
</tbody>
</table>
<p>（注意：1.在使用cmake-gui的时候可能需要多点几次<code>Configure</code>，因为有些配置项一开始可能找不到。 2.在用VS生成OpenCV库文件时，根据不同的编译模式需要指定对应的tesseract的 <strong>lib</strong> 文件，tesseract305.lib表示release版本，后面加d的tesseract305d.lib为debug版本。 3.opencv_contrib解压出来的文件名是opencv_contrib_3.2.0,我改成了contrib）</p>
<p>完成之后同样将OpenCV的<code>bin</code>路径（例如<code>D:\OpenCV\install\x64\vc15\bin</code>）加入环境变量<strong>PATH</strong>，否则运行生成的<strong>exe</strong>时，会提示找不到相关的 <strong>dll</strong> 文件。因为你需要把路径写入到<strong>PATH</strong>，操作系统才知道要去哪里加载它们<strong><sup><a href="http://docs.opencv.org/master/d3/d52/tutorial_windows_install.html#tutorial_windows_install_path" target="_blank" rel="external"> [2] </a></sup></strong>。</p>
<p>故事进行到这里所有的编译工作就已经结束了，下面就可以开启新篇章，开始在vs中跑样例程序了😁</p>
<hr>
<h1 id="测试end-to-end-recognition"><a href="#测试end-to-end-recognition" class="headerlink" title="测试end_to_end_recognition"></a>测试end_to_end_recognition</h1><p>首先新建一个VS工程(例如叫 <strong>textCV</strong> )，空项目就行。新建一个源文件，例如<code>source.cpp</code>，把<a href="https://github.com/opencv/opencv_contrib/blob/master/modules/text/samples/end_to_end_recognition.cpp" target="_blank" rel="external">end_to_end_recognition.cpp</a> 里的代码拷贝进去。</p>
<h2 id="把OpenCV库文件配置到到项目中："><a href="#把OpenCV库文件配置到到项目中：" class="headerlink" title="把OpenCV库文件配置到到项目中："></a>把OpenCV库文件配置到到项目中：</h2><p>这步的目的是要告诉VS你的opencv头文件和lib库在哪，否则没法编译生成<strong>EXE</strong>可执行文件<strong><sup><a href="http://docs.opencv.org/master/d6/d8a/tutorial_windows_visual_studio_Opencv.html" target="_blank" rel="external"> [3] </a></sup></strong>。</p>
<p>我是通过添加本地项目属性表来实现的，首先点击<strong>视图 –&gt;属性管理器</strong>，接着点开属性管理器页面，找到<strong>Release|x64</strong> 右键<strong>添加新项目属性表</strong>，然后在新建的属性表上<strong>右键–&gt;属性</strong>， 在弹出的属性配置页面，做如下配置：</p>
<ol>
<li><p><strong>C/C++目录–&gt;通用–&gt;附加包含目录</strong>，添加opencv头文件目录(共3个)，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:\OpenCV\install\include</div><div class="line">D:\OpenCV\install\include\opencv</div><div class="line">D:\OpenCV\install\include\opencv2</div></pre></td></tr></table></figure>
</li>
<li><p><strong>链接器–&gt;常规–&gt;附加库目录</strong>，添加opencv lib库目录，例如:<code>D:\OpenCV\install\x64\vc15\lib</code></p>
</li>
<li><strong>链接器–&gt;输入–&gt;附加依赖项</strong>，添加opencv库文件：<br>以<strong>Release</strong>生成模式为例，一个完整的列表如下(Debug版的文件名为opencv_*d.lib)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">opencv_aruco320.lib</div><div class="line">opencv_bgsegm320.lib</div><div class="line">opencv_bioinspired320.lib</div><div class="line">opencv_calib3d320.lib</div><div class="line">opencv_ccalib320.lib</div><div class="line">opencv_core320.lib</div><div class="line">opencv_datasets320.lib</div><div class="line">opencv_dnn320.lib</div><div class="line">opencv_dpm320.lib</div><div class="line">opencv_face320.lib</div><div class="line">opencv_features2d320.lib</div><div class="line">opencv_flann320.lib</div><div class="line">opencv_fuzzy320.lib</div><div class="line">opencv_highgui320.lib</div><div class="line">opencv_imgcodecs320.lib</div><div class="line">opencv_imgproc320.lib</div><div class="line">opencv_line_descriptor320.lib</div><div class="line">opencv_ml320.lib</div><div class="line">opencv_objdetect320.lib</div><div class="line">opencv_optflow320.lib</div><div class="line">opencv_phase_unwrapping320.lib</div><div class="line">opencv_photo320.lib</div><div class="line">opencv_plot320.lib</div><div class="line">opencv_reg320.lib</div><div class="line">opencv_rgbd320.lib</div><div class="line">opencv_saliency320.lib</div><div class="line">opencv_shape320.lib</div><div class="line">opencv_stereo320.lib</div><div class="line">opencv_stitching320.lib</div><div class="line">opencv_structured_light320.lib</div><div class="line">opencv_superres320.lib</div><div class="line">opencv_surface_matching320.lib</div><div class="line">opencv_text320.lib</div><div class="line">opencv_tracking320.lib</div><div class="line">opencv_video320.lib</div><div class="line">opencv_videoio320.lib</div><div class="line">opencv_videostab320.lib</div><div class="line">opencv_xfeatures2d320.lib</div><div class="line">opencv_ximgproc320.lib</div><div class="line">opencv_xobjdetect320.lib</div><div class="line">opencv_xphoto320.lib</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-f5978617a618519b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>配置完成后点击<strong>生成–&gt;生成解决方案</strong>，VS会在项目文件夹的<code>x64/Release</code>目录下生成<strong>textCV.exe</strong></p>
<p>此时还需要做最后两件事就是，就是拷贝以下文件到<strong>textCV.exe</strong>所在文件目录：</p>
<ol>
<li>在你的opencv_contrib的text模块的<code>samples</code>文件夹中(如<code>D:\OpenCV\sources\modules\contrib\modules\text\samples</code>)找到以下三个文件<strong>trained_classifierNM2.xml</strong>、<strong>trained_classifierNM1.xml</strong>和<strong>scenetext01.jpg</strong>，并拷贝到<code>x64/Release</code>目录</li>
<li>在<code>x64/Release</code>目录中新建<code>tessdata</code>文件夹，然后将<a href="https://github.com/tesseract-ocr/tessdata/raw/3.04.00/eng.traineddata" target="_blank" rel="external">eng.traineddata</a>放进去。</li>
</ol>
<p>最后在命令行窗口中<code>x64/Release</code>目录下运行 <code>testCV scenetext01.jpg</code>，就大功告成了🎉~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4066522-cf60ec876e903e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test success!"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.polarxiong.com/archives/Tesseract-3-05%E5%8F%8A%E4%B9%8B%E5%90%8E%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL.html" target="_blank" rel="external">https://www.polarxiong.com/archives/Tesseract-3-05%E5%8F%8A%E4%B9%8B%E5%90%8E%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL.html</a></li>
<li><a href="https://segmentfault.com/a/1190000003496009" target="_blank" rel="external">https://segmentfault.com/a/1190000003496009</a></li>
<li><a href="http://docs.opencv.org/master/d6/d8a/tutorial_windows_visual_studio_Opencv.html" target="_blank" rel="external">http://docs.opencv.org/master/d6/d8a/tutorial_windows_visual_studio_Opencv.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近做一些字符识别的事情，想试一下opencv_contrib里的&lt;a href=&quot;https://github.com/opencv/opencv_contrib/tree/master/modules/text&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Text&lt;/a&gt;(自然场景图像中的文本检测与识别)模块。&lt;/p&gt;
&lt;p&gt;我参照了网上的一些教程去编译opencv+opencv_contrib，但是最后去跑样例程序(比如&lt;a href=&quot;https://github.com/opencv/opencv_contrib/blob/master/modules/text/samples/end_to_end_recognition.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;end_to_end_recognition.cpp&lt;/a&gt; ),在运行生成的&lt;strong&gt;exe&lt;/strong&gt;文件时会提示&lt;code&gt;OCRTesseract(33): Tesseract not found.&lt;/code&gt;类似的错误。&lt;/p&gt;
&lt;p&gt;其原因&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33655610/opencv-tesseract/35012185#35012185&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; [1] &lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;是Text模块中的字符识别部分使用的是&lt;a href=&quot;https://github.com/tesseract-ocr/tesseract&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tesseract OCR&lt;/a&gt;，因此在使用CMake编译生成OpenCV项目文件时，应该确保它能找到Tesseract.&lt;br&gt;也就是需要先编译好Tesseract，接着告诉CMake你的Tesseract在哪(包括它的头文件&lt;strong&gt;.h&lt;/strong&gt;以及&lt;strong&gt;lib&lt;/strong&gt;文件)，然后再编译OpenCV.&lt;/p&gt;
&lt;p&gt;最终样例的&lt;strong&gt;端到端字符识别效果图&lt;/strong&gt;如下：&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4066522-179cef6eae5a7888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;End to End Scene Text识别结果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Study" scheme="http://tinyland.site/categories/Study/"/>
    
      <category term="Computer Vision" scheme="http://tinyland.site/categories/Study/Computer-Vision/"/>
    
    
      <category term="opencv" scheme="http://tinyland.site/tags/opencv/"/>
    
      <category term="ocr" scheme="http://tinyland.site/tags/ocr/"/>
    
      <category term="tesseract" scheme="http://tinyland.site/tags/tesseract/"/>
    
      <category term="场景文字识别" scheme="http://tinyland.site/tags/%E5%9C%BA%E6%99%AF%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tinyland.site/posts/2014-12-22-hello-world.html"/>
    <id>http://tinyland.site/posts/2014-12-22-hello-world.html</id>
    <published>2014-12-22T04:39:04.000Z</published>
    <updated>2017-06-19T03:32:48.431Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="http://tinyland.site/categories/Other/"/>
    
    
      <category term="hexo" scheme="http://tinyland.site/tags/hexo/"/>
    
  </entry>
  
</feed>
