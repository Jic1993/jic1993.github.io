<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Lissajous曲线动画演示（Maltab实现）]]></title>
    <url>%2Fposts%2F2017-07-02-matlab-implementation-for-lissajous-curve-animation-demo.html</url>
    <content type="text"><![CDATA[在别人的博文里看到 Lissajous曲线的动态图， 感觉还挺帅，于是自己也想玩一下。 具体实现 环境： Matlab R2017a Animated Line 实现动画效果首先用animatedline创建初始动画线条对象 [1] ，接着在循环中动态地向线条中添加点，并使用 drawnow 在屏幕上显示该新添加的点，然后用getframe捕获的当前图像。 12345678910111213141516171819202122232425262728293031323334353637%%% Create a new figure window,% Background color is white% MenuBar is hidden% Image size is 480*480figure('Color','w','MenuBar','none','InnerPosition',[0 0 480 480]);co = [65/255, 131/255, 196/255]; % specify the color% Create animated line objectheadMarker = animatedline('LineStyle','none','Marker','o','Color',co,'MarkerFaceColor',co);body = animatedline('LineStyle','-','LineWidth',1.3,'Color',co); % trajectoryaxis([-1,1,-1,1]); axis off; % hide axis%%% Parametersa = 13;b = 18;phi = pi * 0;% Parametric Equation of Lissajous Curvet = linspace(0,2*pi,1000); % generate 1000 linearly equally spaced pointsx = sin(a*t);y = sin(b*t+ phi);%%% Displayfor idx = 1:length(t) addpoints(headMarker,x(idx),y(idx)); addpoints(body,x(idx),y(idx)); drawnow % Capture the current plot frame = getframe; % snapshot of the current axes im&#123;idx&#125; = frame2im(frame); % write image data to `im` % Remove previous head marker except for the last one if idx~=length(t) clearpoints(headMarker); endend 写入GIF动图将getframe捕获的每一个图像，写入 GIF 动画文件 [2] 。 123456789101112131415%%% Save images into a GIF file.% Because three-dimensional data is not supported for GIF files,% call rgb2ind to convert the RGB data in the image to an indexed image A with a colormap map.filename = 'Lissajous.gif'; % specify the output file namefor idx = 1:length(t) [A,map] = rgb2ind(im&#123;idx&#125;,256); if idx == 1 %Set DelayTime = 0 to display next images as fast as your hardware allows imwrite(A,map,filename,'gif','LoopCount',Inf,'DelayTime',0); else % To append multiple images to the first image imwrite(A,map,filename,'gif','WriteMode','append','DelayTime',0); endend 参考 http://www.matrix67.com/blog/archives/6947 https://codepen.io/handsomeone/full/Kgmbqg https://cn.mathworks.com/matlabcentral/fileexchange/28987-lissajous-curve https://cn.mathworks.com/examples/matlab/community/22655-lissajous-curves]]></content>
      <categories>
        <category>Study</category>
        <category>Math</category>
      </categories>
      <tags>
        <tag>matlab</tag>
        <tag>lissajous</tag>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10+VS2017编译opencv3.2.0和opencv_contrib3.2.0来调用text模块]]></title>
    <url>%2Fposts%2F2017-06-19-Win10-VS2017-compile-opencv3-2-0-and-opencv-contrib3-2-0-to-call-the-text-module.html</url>
    <content type="text"><![CDATA[前言最近做一些字符识别的事情，想试一下opencv_contrib里的Text(自然场景图像中的文本检测与识别)模块。 我参照了网上的一些教程去编译opencv+opencv_contrib，但是最后去跑样例程序(比如end_to_end_recognition.cpp ),在运行生成的exe文件时会提示OCRTesseract(33): Tesseract not found.类似的错误。 其原因 [1] 是Text模块中的字符识别部分使用的是Tesseract OCR，因此在使用CMake编译生成OpenCV项目文件时，应该确保它能找到Tesseract.也就是需要先编译好Tesseract，接着告诉CMake你的Tesseract在哪(包括它的头文件.h以及lib文件)，然后再编译OpenCV. 最终运行样例程序得到的端到端字符识别效果图如下： 以下是我的具体步骤：(下面的方法是我自己试过可行的，不保证方法一定很简洁，应该说确实有些繁琐，因为我对编译源码经验也一般，我想肯定有更加简洁的方法可以办到) 安装依赖 Windows 10 / 64-bit VS2017 Community https://www.visualstudio.com/zh-hans/vs/ CMake最新版 https://cmake.org/download/ (我选的是cmake-3.8.2-win64-x64.msi) CPPAN最新版 https://cppan.org/client/ (cppan-master-Windows-client.zip) Tesseract 3.05.01 https://github.com/tesseract-ocr/tesseract/releases/tag/3.05.01 OpenCV 3.2.0 https://github.com/opencv/opencv/releases/tag/3.2.0) OpenCV_contrib 3.2.0 https://github.com/opencv/opencv_contrib/releases/tag/3.2.0(和opencv的版本对应) 注意在安装VS2017的时候需要勾选使用C++的桌面开发这个选项，否则后面用CMake编译的时候可能会提示找不到C++编译器。(估计应该就是需要右边小红框里的那个东西，但是保险起见我还是全装了=-=) 编译Tesseract下载完源代码之后，我习惯先创建3个文件夹 sources, build 和 install 分别用来存放解压出来的源代码、以及之后会编译输出的工程文件和安装文件。 使用CPPAN下载依赖包在用CMake(cmake-gui)编译tesseract源代码之前，需要先用CPPAN下载依赖项，首先打开命令行提示工具(cmd)：123d:cd path_to_tesseract //比如我的是 D:\Tesseract\sourcescppan //下载依赖的软件包，如leptonica等 CPPAN感觉就是一个C++的包管理器，类似于Java的Maven、JavaScript的npm. 我也是第一次接触，看了tesseract的官方编译文档才知道有这么个神奇的东西。当在tesseract根目录下运行cppan时，它会读取cppan.yml文件中所规定的项目的依赖项（如下图所示），帮你下载好需要的依赖包和初始化编译器配置。具体可以参考CPPAN官方文档 使用cmake-gui进行编译打开cmake-gui进行编译： 在where is the source code中选择tesseract的源码路径，比如我的是D:/Tesseract/sources 在where to build the binaries里面选择你要编译到的路径，例如D:/Tesseract/build 点击Configure，这时会弹出一个对话框，让你设置生成器，选择Visual Studio 15 2017 Win64，点击Finish，这个时候CMake会开始在build目录下生成一些配置文件，如 CMakeCache.txt 等。 完成之后会在屏幕中间出现一堆Name和Value的参数，找到CMAKE_INSTALL_PREFIX 将其设置成你想要的安装路径，例如 D:/Tesseract/install 再次点击Configure，然后点击Generate，这时你可以看到在build目录下已经生成了名为tesseract.sln的VS工程（就是这么神奇^-^）。 用VS编译生成debug和release库： 打开build目录下的tesseract.sln的VS工程（直接在cmake-gui中点Open Project是一样的） 编译生成Debug版本库：首先选择Debug生成模式, 找到CMakeTargets中的ALL_BUILD,点击右键–&gt;生成解决方案。这一步会需要一些时间，之后你会在build/bin/Debug目录下看到新生成了很多文件，其实这时候tesseract已经可以用了（前提是在此目录下面下载好训练数据文件）。 生成安装文件：找到CMakeTargets中的INSTALL，然后右键选择仅限于项目–&gt;仅生成INSTALL，然后在D:\Tesseract\install中就会看到生成好生成头文件和可执行文件等。 Release版本的方法相同，选择Release模式，重复2、3即可。 编译错误解决： 在编译生成过程中可能会遇到因为文件编码问题而产生的错误，一个出错的地方是pango-language-sample-table.h ，需要改成UTF-8 编码；另一个是equationdetect.cpp，需要改成ANSI/OEM-简体中文 GBK编码。 有同学可能想说，那我直接点击仅生成INSTALL行不行？ 你可以自己尝试一下，答案是不行的😂 其实感觉这一套流程，和在Linux系统上用命令打./configure, make, make install...之类的应该是对应的，只是在Windows上改成了用CMake、VS等图形化界面地去完成了这些事情。 有些尬尴的是，这个时候tesseract还不能用，主要是要解决两个问题： 如果你在命令行中install/bin目录下输入tesseract phototest.tif stdout （phototest是一张待识别的字符图片，stdout表示将识别结果输出到标准输出即在命令行中直接显示）， 会提示丢失pvt.cppan.demo.danbloomberg.leptonica-1.74.4.dll等一系列dll的错误。这里我的解决办法比较笨（感觉应该可以通过一些配置，让VS自己拷贝过去），就是直接把build/bin下的dll全部拷贝过去，放到install/bin路径下。 再次执行tesseract phototest.tif stdout，会提示如下所示的另一个问题，找不到训练数据文件\Tesseract\install\bin\tessdata/eng.traineddata. 123456D:\Tesseract\install\bin&gt;tesseract phototest.tif stdoutError opening data file \Tesseract\install\bin\tessdata/eng.traineddataPlease make sure the TESSDATA_PREFIX environment variable is set to the parent directory of your &quot;tessdata&quot; directory.Failed loading language &apos;eng&apos;Tesseract couldn&apos;t load any languages!Could not initialize tesseract. 解决办法就是到tesseract官网的数据下载页面下载Tesseract 3.05 对应的训练数据 eng.traineddata， 然后在install/bin目录下新建tessdata文件夹，并放入下载好的数据文件eng.traineddata，这样tesseract就可以用了。 12345678910D:\Tesseract\install\bin&gt;tesseract phototest.tif stdoutPage 1This is a lot of 12 point text to test thecor code and see if it works on all typesof file format.The quick brown dog jumped over thelazy fox. The quick brown dog jumpedover the lazy fox. The quick brown dogjumped over the lazy fox. The quickbrown dog jumped over the lazy fox. (注：这里可以先将tesseract的bin路径(如:D:\Tesseract\install\bin)加入到环境变量PATH中，因为后面跑样例程序的时候会用到，否则会报错。) 编译opencv+opencv_contrib编译方法和上面tesseract的步骤非常类似，同样是先用cmake-gui编译，然后用VS生成库文件（先ALL_BUILD，再INSTALL），基本就是照着上面的流程再来一遍。 只是在cmake编译时的一些配置项不同，尤其重要的是你要告诉CMake你的opencv_contrib和tesseract在哪，具体见下表。 Name Value(根据你自己的路径修改) 备注 OPENCV_EXTRA_MODULES_PATH D:/OpenCV/sources/modules/contrib/modules opencv_contrib的路径 CMAKE_INSTALL_PREFIX D:/OpenCV/install 目标安装路径 Tesseract_INCLUDE_DIR D:/Tesseract/install/include tesseract头文件路径 Tesseract_LIBRARY D:/Tesseract/install/lib/tesseract305.lib tesseract lib路径 注： 在使用cmake-gui的时候可能需要多点几次Configure，因为有些配置项一开始可能找不到。 在用VS生成OpenCV库文件时，根据不同的编译模式需要指定对应的tesseract的 lib 文件，tesseract305.lib表示release版本，后面加d的tesseract305d.lib为debug版本。 opencv_contrib解压出来的文件名是opencv_contrib_3.2.0,我改成了contrib. 完成之后同样将OpenCV的bin路径（例如D:\OpenCV\install\x64\vc15\bin）加入环境变量PATH，否则运行生成的exe时，会提示找不到相关的 dll 文件。因为你需要把路径写入到PATH，操作系统才知道要去哪里加载它们 [2] 。 故事进行到这里所有的编译工作就已经结束了，下面就可以开启新篇章，开始在vs中跑样例程序了😁 测试end_to_end_recognition首先新建一个VS工程(例如叫 textCV )，空项目就行。新建一个源文件，例如source.cpp，把end_to_end_recognition.cpp 里的代码拷贝进去。 把OpenCV库文件配置到到项目中： 这步的目的大概就是告诉VS你的opencv头文件和lib库在哪，否则没法编译生成EXE可执行文件 [3] 。 我是通过添加本地项目属性表来实现的，首先点击视图 –&gt;属性管理器，接着点开属性管理器页面，找到Release|x64 右键添加新项目属性表，然后在新建的属性表上右键–&gt;属性， 在弹出的属性配置页面，做如下配置： C/C++目录–&gt;通用–&gt;附加包含目录，添加opencv头文件目录(共3个)，例如： 123D:\OpenCV\install\includeD:\OpenCV\install\include\opencvD:\OpenCV\install\include\opencv2 链接器–&gt;常规–&gt;附加库目录，添加opencv lib库目录，例如:D:\OpenCV\install\x64\vc15\lib 链接器–&gt;输入–&gt;附加依赖项，添加opencv库文件：以Release生成模式为例，一个完整的列表如下(Debug版的文件名为opencv_*d.lib)：1234567891011121314151617181920212223242526272829303132333435363738394041opencv_aruco320.libopencv_bgsegm320.libopencv_bioinspired320.libopencv_calib3d320.libopencv_ccalib320.libopencv_core320.libopencv_datasets320.libopencv_dnn320.libopencv_dpm320.libopencv_face320.libopencv_features2d320.libopencv_flann320.libopencv_fuzzy320.libopencv_highgui320.libopencv_imgcodecs320.libopencv_imgproc320.libopencv_line_descriptor320.libopencv_ml320.libopencv_objdetect320.libopencv_optflow320.libopencv_phase_unwrapping320.libopencv_photo320.libopencv_plot320.libopencv_reg320.libopencv_rgbd320.libopencv_saliency320.libopencv_shape320.libopencv_stereo320.libopencv_stitching320.libopencv_structured_light320.libopencv_superres320.libopencv_surface_matching320.libopencv_text320.libopencv_tracking320.libopencv_video320.libopencv_videoio320.libopencv_videostab320.libopencv_xfeatures2d320.libopencv_ximgproc320.libopencv_xobjdetect320.libopencv_xphoto320.lib P.S. 可以在Windows命令行中用tree /F得到一个文件夹下的所有文件名 [4] 。 运行样例程序配置完成后点击生成–&gt;生成解决方案，VS会在项目文件夹的x64/Release目录下生成textCV.exe 此时还需要做最后两件事就是，就是拷贝以下文件到textCV.exe所在文件目录： 在你的opencv_contrib的text模块的samples文件夹中(如D:\OpenCV\sources\modules\contrib\modules\text\samples)找到以下三个文件trained_classifierNM2.xml、trained_classifierNM1.xml和scenetext01.jpg，并拷贝到项目的x64/Release目录（或是在D:\OpenCV\build\testdata\contrib\text目录中也可以找到） 在x64/Release目录中新建tessdata文件夹，然后将eng.traineddata放进去。 最后在命令行窗口中x64/Release目录下运行 testCV scenetext01.jpg，就大功告成了🎉~ 参考 https://www.polarxiong.com/archives/Tesseract-3-05%E5%8F%8A%E4%B9%8B%E5%90%8E%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL.html https://segmentfault.com/a/1190000003496009 http://docs.opencv.org/master/d6/d8a/tutorial_windows_visual_studio_Opencv.html]]></content>
      <categories>
        <category>Study</category>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>ocr</tag>
        <tag>tesseract</tag>
        <tag>场景文字识别</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F2017-06-15-hello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>